name: Release

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.get_version.outputs.VERSION }}
        name: "JellyfinÂ∑•ÂÖ∑ÁÆ± ${{ steps.get_version.outputs.VERSION }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## üöÄ JellyfinÂ∑•ÂÖ∑ÁÆ± ${{ steps.get_version.outputs.VERSION }}
          
          ü§ñ **Êú¨ÁâàÊú¨Áî± Claude Code ÂàõÂª∫** - ‰ΩøÁî® AI Âä©ÊâãËøõË°åÂÆåÊï¥ÂºÄÂèë
          
          ### üì¶ ‰∏ãËΩΩËØ¥Êòé
          
          **ÊØè‰∏™Âπ≥Âè∞ÂåÖÈÉΩÊòØÂÆåÂÖ®Áã¨Á´ãÁöÑÔºåÂåÖÂê´ÊâÄÊúâËøêË°åÊó∂‰æùËµñÔºö**
          
          #### Windows
          - **‰æøÊê∫Áâà**: `jtools-windows.zip` - ÂåÖÂê´fat JARÂíåÂêØÂä®ËÑöÊú¨
          - **ÂÆâË£ÖÂåÖ**: `jtools-1.0.0.msi` - WindowsÂÆâË£ÖÁ®ãÂ∫è
          
          #### Linux  
          - **‰æøÊê∫Áâà**: `jtools-linux.tar.gz` - ÂåÖÂê´fat JARÂíåÂêØÂä®ËÑöÊú¨
          - **DEBÂåÖ**: `jtools_1.0.0_amd64.deb` - Debian/UbuntuÂÆâË£ÖÂåÖÔºàÂ¶ÇÊûúÊûÑÂª∫ÊàêÂäüÔºâ
          
          #### macOS
          - **‰æøÊê∫Áâà**: `jtools-macos.zip` - ÂåÖÂê´fat JARÂíåÂêØÂä®ËÑöÊú¨  
          - **DMGÂåÖ**: `jtools-1.0.0.dmg` - macOSÂÆâË£ÖÈïúÂÉè
          
          #### ÈÄöÁî®JAR
          - **Fat JAR**: `jtools-${{ steps.get_version.outputs.VERSION }}.jar` - Áã¨Á´ãËøêË°åÁöÑÂÆåÊï¥JARÊñá‰ª∂
          
          ### üéØ ‰∏ªË¶ÅÂäüËÉΩ
          
          - üé¨ ÂØºÂÖ•ÂØºÂá∫JellyfinÂñúÁà±ÁöÑÁîµÂΩ±ÂíåÊºîÂëò
          - üîÑ Ë∑®ÊúçÂä°Âô®Êô∫ËÉΩËøÅÁßª
          - üîç ÈáçÂ§çÁîµÂΩ±Ê£ÄÊµãÂíåÁÆ°ÁêÜ
          - üìä ÂàÜËæ®ÁéáÁ≠õÈÄâÂäüËÉΩ
          - üëÅÔ∏è ÂØºÂá∫ÂÜÖÂÆπÂèØËßÜÂåñÈ¢ÑËßà
          - üì± È´òÂàÜËæ®ÁéáÂ±èÂπïÂÆåÁæéÈÄÇÈÖç
          - üåê Ë∑®Âπ≥Âè∞ÊîØÊåÅ (Windows, macOS, Linux)
          
          ### üõ†Ô∏è ÊäÄÊúØÁâπËâ≤
          
          - Kotlin Multiplatform Êû∂ÊûÑ
          - Compose Desktop Áé∞‰ª£UI
          - Material Design 3 ËÆæËÆ°ËØ≠Ë®Ä
          - Fat JAR Áã¨Á´ãËøêË°åÔºåÊó†ÈúÄÈ¢ùÂ§ñ‰æùËµñ
          - AI È©±Âä®ÁöÑ‰ª£Á†ÅË¥®Èáè
          
          ### üö¶ ‰ΩøÁî®ÊñπÊ≥ï
          
          #### GUIÁâàÊú¨ÔºàÊé®ËçêÔºâ
          ```bash
          # Ëß£ÂéãÂêéËøêË°åÔºàÊâÄÊúâÂπ≥Âè∞Ôºâ
          ./jellyfin-tools-gui      # Linux/macOS
          jellyfin-tools-gui.bat    # Windows
          ```
          
          #### CLIÁâàÊú¨
          ```bash
          # ÊµãËØïËøûÊé•
          ./jellyfin-tools-cli test -s http://your-server:8096 -t your-token
          
          # ÂØºÂá∫Êï∞ÊçÆ
          ./jellyfin-tools-cli export -s http://your-server:8096 -t your-token -o favorites.json
          
          # ÂØºÂÖ•Êï∞ÊçÆ
          ./jellyfin-tools-cli import -s http://your-server:8096 -t your-token -i favorites.json
          
          # ÂàÜËæ®ÁéáÁ≠õÈÄâ
          ./jellyfin-tools-cli resolution -s http://your-server:8096 -t your-token --max-resolution 1080p
          ```
          
          #### Áõ¥Êé•‰ΩøÁî®JARÊñá‰ª∂
          ```bash
          # GUI
          java -cp jtools-jvm-1.0.0.jar com.jtools.jellyfin.gui.MainKt
          
          # CLI
          java -jar jtools-jvm-1.0.0.jar --help
          ```
          
          ### üìã Á≥ªÁªüË¶ÅÊ±Ç
          
          - Java 17 ÊàñÊõ¥È´òÁâàÊú¨
          - 2GB+ ÂèØÁî®ÂÜÖÂ≠òÔºàÊé®ËçêÔºâ
          - ÁΩëÁªúËøûÊé•ËÆøÈóÆJellyfinÊúçÂä°Âô®
          
          ---
          
          **ÂÆåÊï¥ÊñáÊ°£**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          
          **ÂèçÈ¶àÈóÆÈ¢ò**: [Issues](https://github.com/${{ github.repository }}/issues)
        draft: false
        prerelease: false

  build-cross-platform:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            executable-suffix: ""
            archive-suffix: "tar.gz"
            native-formats: "deb,rpm"
          - os: windows-latest
            platform: windows
            executable-suffix: ".exe"
            archive-suffix: "zip"
            native-formats: "msi"
          - os: macos-latest
            platform: macos
            executable-suffix: ""
            archive-suffix: "zip"
            native-formats: "dmg"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew (Unix)
      if: matrix.os != 'windows-latest'
      run: chmod +x gradlew
      
    - name: Simplify build for release (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # Create a simplified build.gradle.kts for release builds with fat JAR
        cp build.gradle.kts build.gradle.kts.backup
        cat > build.gradle.kts << 'EOF'
        plugins {
            kotlin("multiplatform") version "1.9.20"
            kotlin("plugin.serialization") version "1.9.20"
            id("org.jetbrains.compose") version "1.5.11"
        }

        group = "com.jtools"
        version = "1.0.0"

        repositories {
            mavenCentral()
            google()
            maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
        }

        kotlin {
            jvm {
                jvmToolchain(17)
                withJava()
            }

            sourceSets {
                val commonMain by getting {
                    dependencies {
                        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
                        implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
                        implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
                        implementation("io.ktor:ktor-client-core:2.3.5")
                        implementation("io.ktor:ktor-client-content-negotiation:2.3.5")
                        implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.5")
                        implementation("io.ktor:ktor-client-logging:2.3.5")
                    }
                }

                val jvmMain by getting {
                    dependencies {
                        implementation(compose.desktop.currentOs)
                        implementation(compose.material3)
                        implementation(compose.materialIconsExtended)
                        implementation("io.ktor:ktor-client-okhttp:2.3.5")
                        implementation("org.slf4j:slf4j-simple:2.0.9")
                        implementation("com.github.ajalt.clikt:clikt:4.2.1")
                    }
                }
            }
        }

        // ÈáçÊñ∞ÈÖçÁΩÆjvmJar‰ªªÂä°‰ª•Ê≠£Á°ÆÂåÖÂê´ÊâÄÊúâ‰æùËµñ
        tasks.named<Jar>("jvmJar") {
            manifest {
                attributes["Main-Class"] = "com.jtools.jellyfin.MainKt"
            }
            
            val jvmMain = kotlin.jvm().compilations.getByName("main")
            from(jvmMain.output)
            
            dependsOn(jvmMain.compileTaskProvider)
            
            from({
                jvmMain.runtimeDependencyFiles.filter { it.name.endsWith("jar") }.map { zipTree(it) }
            })
            
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        compose.desktop {
            application {
                mainClass = "com.jtools.jellyfin.gui.MainKt"
                nativeDistributions {
                    targetFormats(
                        org.jetbrains.compose.desktop.application.dsl.TargetFormat.Dmg,
                        org.jetbrains.compose.desktop.application.dsl.TargetFormat.Msi,
                        org.jetbrains.compose.desktop.application.dsl.TargetFormat.Deb
                    )
                    packageName = "jellyfin-tools"
                    packageVersion = "1.0.0"
                    description = "JellyfinÂ∑•ÂÖ∑ÁÆ± - AIÈ©±Âä®ÁöÑË∑®ÊúçÂä°Âô®Êï∞ÊçÆËøÅÁßªÂ∑•ÂÖ∑"
                    copyright = "¬© 2024 JTools Team. Created with Claude Code."
                    vendor = "JTools Team"
                }
            }
        }
        EOF

    - name: Simplify build for release (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Create a simplified build.gradle.kts for release builds with fat JAR
        Copy-Item build.gradle.kts build.gradle.kts.backup
        @"
        plugins {
            kotlin("multiplatform") version "1.9.20"
            kotlin("plugin.serialization") version "1.9.20"
            id("org.jetbrains.compose") version "1.5.11"
        }

        group = "com.jtools"
        version = "1.0.0"

        repositories {
            mavenCentral()
            google()
            maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
        }

        kotlin {
            jvm {
                jvmToolchain(17)
                withJava()
            }

            sourceSets {
                val commonMain by getting {
                    dependencies {
                        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
                        implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
                        implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
                        implementation("io.ktor:ktor-client-core:2.3.5")
                        implementation("io.ktor:ktor-client-content-negotiation:2.3.5")
                        implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.5")
                        implementation("io.ktor:ktor-client-logging:2.3.5")
                    }
                }

                val jvmMain by getting {
                    dependencies {
                        implementation(compose.desktop.currentOs)
                        implementation(compose.material3)
                        implementation(compose.materialIconsExtended)
                        implementation("io.ktor:ktor-client-okhttp:2.3.5")
                        implementation("org.slf4j:slf4j-simple:2.0.9")
                        implementation("com.github.ajalt.clikt:clikt:4.2.1")
                    }
                }
            }
        }

        // ÈáçÊñ∞ÈÖçÁΩÆjvmJar‰ªªÂä°‰ª•Ê≠£Á°ÆÂåÖÂê´ÊâÄÊúâ‰æùËµñ
        tasks.named<Jar>("jvmJar") {
            manifest {
                attributes["Main-Class"] = "com.jtools.jellyfin.MainKt"
            }
            
            val jvmMain = kotlin.jvm().compilations.getByName("main")
            from(jvmMain.output)
            
            dependsOn(jvmMain.compileTaskProvider)
            
            from({
                jvmMain.runtimeDependencyFiles.filter { it.name.endsWith("jar") }.map { zipTree(it) }
            })
            
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        compose.desktop {
            application {
                mainClass = "com.jtools.jellyfin.gui.MainKt"
                nativeDistributions {
                    targetFormats(
                        org.jetbrains.compose.desktop.application.dsl.TargetFormat.Dmg,
                        org.jetbrains.compose.desktop.application.dsl.TargetFormat.Msi,
                        org.jetbrains.compose.desktop.application.dsl.TargetFormat.Deb
                    )
                    packageName = "jellyfin-tools"
                    packageVersion = "1.0.0"
                    description = "JellyfinÂ∑•ÂÖ∑ÁÆ± - AIÈ©±Âä®ÁöÑË∑®ÊúçÂä°Âô®Êï∞ÊçÆËøÅÁßªÂ∑•ÂÖ∑"
                    copyright = "¬© 2024 JTools Team. Created with Claude Code."
                    vendor = "JTools Team"
                }
            }
        }
        "@ | Out-File -FilePath "build.gradle.kts" -Encoding UTF8
        
    - name: Build JAR (Unix)
      if: matrix.os != 'windows-latest'
      run: ./gradlew clean jvmJar --no-daemon
      
    - name: Build JAR (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: gradlew.bat clean jvmJar --no-daemon
      
    - name: Verify fat JAR (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        JAR_SIZE=$(ls -la build/libs/jtools-jvm-1.0.0.jar | awk '{print $5}')
        echo "JAR size: $JAR_SIZE bytes"
        if [ $JAR_SIZE -lt 50000000 ]; then
          echo "‚ö†Ô∏è  JAR size seems too small for a fat JAR (< 50MB)"
        else
          echo "‚úÖ JAR size looks good for a fat JAR"
        fi
        
    - name: Verify fat JAR (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $JAR_SIZE = (Get-Item "build\libs\jtools-jvm-1.0.0.jar").Length
        Write-Host "JAR size: $JAR_SIZE bytes"
        if ($JAR_SIZE -lt 50000000) {
          Write-Host "‚ö†Ô∏è  JAR size seems too small for a fat JAR (< 50MB)"
        } else {
          Write-Host "‚úÖ JAR size looks good for a fat JAR"
        }
      
    - name: Build executables (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # ÂàõÂª∫GUIÂèØÊâßË°åËÑöÊú¨
        cat > jellyfin-tools-gui << 'EOF'
        #!/bin/bash
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
        java -cp "$DIR/jtools-jvm-1.0.0.jar" com.jtools.jellyfin.gui.MainKt "$@"
        EOF
        chmod +x jellyfin-tools-gui
        
        # ÂàõÂª∫CLIÂèØÊâßË°åËÑöÊú¨
        cat > jellyfin-tools-cli << 'EOF'
        #!/bin/bash
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
        java -jar "$DIR/jtools-jvm-1.0.0.jar" "$@"
        EOF
        chmod +x jellyfin-tools-cli
        
    - name: Build executables (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo @echo off > jellyfin-tools-gui.bat
        echo java -cp "%%~dp0jtools-jvm-1.0.0.jar" com.jtools.jellyfin.gui.MainKt %%* >> jellyfin-tools-gui.bat
        echo @echo off > jellyfin-tools-cli.bat
        echo java -jar "%%~dp0jtools-jvm-1.0.0.jar" %%* >> jellyfin-tools-cli.bat
        
    - name: Create distribution directory
      run: |
        mkdir -p dist/jtools-${{ matrix.platform }}
        
    - name: Copy files (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp build/libs/jtools-jvm-1.0.0.jar dist/jtools-${{ matrix.platform }}/
        cp jellyfin-tools-gui dist/jtools-${{ matrix.platform }}/
        cp jellyfin-tools-cli dist/jtools-${{ matrix.platform }}/
        cp README.md dist/jtools-${{ matrix.platform }}/
        cp jellyfin-config.example.json dist/jtools-${{ matrix.platform }}/
        
    - name: Copy files (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        mkdir "dist\jtools-${{ matrix.platform }}"
        copy "build\libs\jtools-jvm-1.0.0.jar" "dist\jtools-${{ matrix.platform }}\"
        copy "jellyfin-tools-gui.bat" "dist\jtools-${{ matrix.platform }}\"
        copy "jellyfin-tools-cli.bat" "dist\jtools-${{ matrix.platform }}\"
        copy "README.md" "dist\jtools-${{ matrix.platform }}\"
        copy "jellyfin-config.example.json" "dist\jtools-${{ matrix.platform }}\"
        
    - name: Create archive (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd dist
        tar -czf jtools-${{ matrix.platform }}.tar.gz jtools-${{ matrix.platform }}/
        
    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        cd dist
        Compress-Archive -Path "jtools-${{ matrix.platform }}" -DestinationPath "jtools-${{ matrix.platform }}.zip"
        
    - name: Create archive (macOS)
      if: matrix.platform == 'macos'
      run: |
        cd dist
        zip -r jtools-${{ matrix.platform }}.zip jtools-${{ matrix.platform }}/
        
    - name: Build native packages (Linux)
      if: matrix.platform == 'linux'
      run: |
        # ‰∏∫LinuxÊûÑÂª∫debÂåÖÔºàrpmÂèØËÉΩ‰∏çÂèØÁî®Ôºâ
        ./gradlew packageDeb --no-daemon || echo "DEB packaging failed, skipping..."
        
    - name: Build native packages (macOS)
      if: matrix.platform == 'macos'
      run: |
        # ‰∏∫macOSÊûÑÂª∫dmgÂåÖ
        ./gradlew packageDmg --no-daemon || echo "DMG packaging failed, skipping..."
        
    - name: Build native packages (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        try {
          # ‰∏∫WindowsÊûÑÂª∫msiÂåÖ
          .\gradlew.bat packageMsi --no-daemon
          Write-Host "MSI packaging succeeded"
        } catch {
          Write-Host "MSI packaging failed: $($_.Exception.Message)"
          Write-Host "Continuing with portable version only..."
        }
        
    - name: Upload Release Assets (Linux)
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        # ‰∏ä‰º†‰æøÊê∫ÁâàÂåÖ
        gh release upload ${{ needs.create-release.outputs.version }} ./dist/jtools-${{ matrix.platform }}.tar.gz --clobber
        
        # Ê£ÄÊü•Âπ∂‰∏ä‰º†DEBÂåÖÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        if ls ./build/compose/binaries/main/deb/*.deb 1> /dev/null 2>&1; then
          gh release upload ${{ needs.create-release.outputs.version }} ./build/compose/binaries/main/deb/*.deb --clobber
          echo "DEB package uploaded successfully"
        else
          echo "No DEB package found, skipping DEB upload"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Release Assets (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # ‰∏ä‰º†‰æøÊê∫ÁâàÂåÖ
        gh release upload ${{ needs.create-release.outputs.version }} ./dist/jtools-${{ matrix.platform }}.zip --clobber
        
        # Ê£ÄÊü•Âπ∂‰∏ä‰º†MSIÂåÖÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        if (Test-Path "./build/compose/binaries/main/msi/*.msi") {
          gh release upload ${{ needs.create-release.outputs.version }} ./build/compose/binaries/main/msi/*.msi --clobber
          Write-Host "MSI package uploaded successfully"
        } else {
          Write-Host "No MSI package found, skipping MSI upload"
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Release Assets (macOS)
      if: matrix.platform == 'macos'
      shell: bash
      run: |
        # ‰∏ä‰º†‰æøÊê∫ÁâàÂåÖ
        gh release upload ${{ needs.create-release.outputs.version }} ./dist/jtools-${{ matrix.platform }}.zip --clobber
        
        # Ê£ÄÊü•Âπ∂‰∏ä‰º†DMGÂåÖÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        if ls ./build/compose/binaries/main/dmg/*.dmg 1> /dev/null 2>&1; then
          gh release upload ${{ needs.create-release.outputs.version }} ./build/compose/binaries/main/dmg/*.dmg --clobber
          echo "DMG package uploaded successfully"
        else
          echo "No DMG package found, skipping DMG upload"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-native-packages:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build native packages
      run: |
        ./gradlew packageDistributionForCurrentOS
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload universal JAR
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.get_version.outputs.VERSION }}
        artifacts: "./build/libs/jtools-jvm-1.0.0.jar"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true